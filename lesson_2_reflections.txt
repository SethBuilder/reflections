What happens when you initialize a repository? Why do you need to do it?
the hidden git file .git starts to track commits made on the files using meta data.

How is the staging area different from the working directory and the repository? What value do you think it offers?
I think when you send something to staging area you can double check the change before commit. Also it serves as in between area where you move the file that you changed and you think the change is substantial and appropraite to commit.

How can you use the staging area to make sure you have one commit per logical change?
I think because I might change several files that include several logical changes and when it's time to commit I can move one or few files at a time that include on logical change, double check everything and then commit with a clear commit message and then repeat the process with other changed files. 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
experimetning, working on new features. also, keeping a branch for production and other branches for development and testing new ideas. however, as middleton said, it is a good practice to have as few branches as possible and commit very often.

How do the diagrams help you visualize the branch structure?

by telling me the flow of commits and what would show on git log and also help me identify lost commits 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
then we can introduce new features and merge the work of two people or more. it is represented as a commit because merge results in a new commit

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
git automatic merge is really fast however when two people edit the same part its better to do it manually when git shows conflict message. so automatic for efficiency and manual for necessary human input.

Commands:

git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.
git branch new-branch-name | creates new branch

credit for commands description:
https://github.com/Denyos/reflections
